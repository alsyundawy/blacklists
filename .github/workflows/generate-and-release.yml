name: Generate and Release

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  Generate-Blacklist:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Git Configurations
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "github-actions[bot]"

    - name: Check out repository code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history for completeness
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate blacklist
      run: sudo /bin/bash generate_fqdn.sh

    - name: Commit and Push updated blacklist to repository
      run: |
        git add all.fqdn.blacklist.tar.gz 
        git commit -m "Updated blacklist."
        git push origin main

  Create-Release:
    needs: Generate-Blacklist
    runs-on: ubuntu-latest
    steps:
    # (Removed repeated Git Config and Check out repository code here)

    # Extract current blacklist
    - name: Extract current blacklist.txt
      run: |
        mkdir current
        tar -xzf all.fqdn.blacklist.tar.gz -C current
        mv current/all.fqdn.blacklist current/blacklist.txt

    - name: Delete Release if Exists
      run: |
        release_id=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/latest" | jq .id)
        if [ "$release_id" != "null" ]; then
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$release_id"
        fi

    - name: Delete Tag if Exists
      run: |
        if git show-ref --tags latest; then
          git push --delete origin latest
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: latest
        release_name: "Domains Blacklist"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset (Blacklist)
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./current/blacklist.txt
        asset_name: blacklist.txt
        asset_content_type: text/plain
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up
      run: rm -r current
