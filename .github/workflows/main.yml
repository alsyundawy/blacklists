name: Combined Actions

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:


jobs:
  Generate-Blacklist:
    runs-on: ubuntu-latest
    steps:
      - run: git config --global user.email "fabrizio.salmi@gmail.com"
      - run: git config --global user.name "fabriziosalmi"
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: main
      - name: Generate blacklist
        run: sudo /bin/bash generate_fqdn.sh
      - name: Refresh repository
        run: git pull https://fabriziosalmi:${{ secrets.TOKEN }}@github.com/fabriziosalmi/blacklists
      - name: Add updated blacklist to repository
        run: git add all.fqdn.blacklist.tar.gz && git commit -m "last update"
      - name: Push to repository
        run: git push https://fabriziosalmi:${{ secrets.TOKEN }}@github.com/fabriziosalmi/blacklists

  Create-Release:
    runs-on: ubuntu-latest  # Change this back to self-hosted once you confirm it works

    steps:
    - run: git config --global user.email "fabrizio.salmi@gmail.com"
    - run: git config --global user.name "fabriziosalmi"
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # Shallow clones should be disabled to decrease time waste 
        ref: main
    - name: Delete old 'latest' tag (locally and remotely)
      run: |
        git tag -d latest || echo "Local tag not found, proceeding..."
        git push --delete origin latest || echo "Remote tag not found, proceeding..."
        
    - name: Create new 'latest' tag
      run: |
        git tag -fa latest -m "Latest release"
        git push origin main --tags --force  # Force is needed to overwrite the existing 'latest' tag
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: latest
        release_name: "Domains blacklist"
        body: Auto-generated release from GitHub Actions.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./all.fqdn.blacklist.tar.gz
        asset_name: latest.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Deploy-Pages:
    needs: Generate-Blacklist
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: self-hosted
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: main
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
