If you want to delete all releases except for the latest one, you can use a combination of GitHub API and a bash script to achieve this. Here is a GitHub Actions workflow for this purpose:

1. Fetch all the releases from the repository.
2. Skip the latest one.
3. Delete the rest.

Here's how you can set this up:

```yaml
name: Delete All Releases Except Latest

on:
  workflow_dispatch:

jobs:
  delete-releases:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Delete all releases except the latest
      run: |
        releases=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
        latest_id=$(echo "$releases" | jq '.[0].id')
        ids_to_delete=$(echo "$releases" | jq ".[] | select(.id != $latest_id) | .id")
        
        for id in $ids_to_delete; do
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/$id"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

Make sure to trigger the workflow manually using `workflow_dispatch`, so it doesn't run unintentionally.

Remember:
1. This action uses `jq` to parse the JSON output from the GitHub API. It's installed by default on the GitHub runners.
2. Ensure you don't run this workflow unintentionally, as it will delete data.
3. Always have backups of your data/releases. It's always a good idea before running automated deletion tasks.
4. This assumes that your releases are ordered with the latest one first, which is the default ordering by GitHub API. If this ever changes (unlikely), the script will need adjustment.
